.MODEL SMALL
.STACK 100H
.DATA
MESSAGE1 DB 'ENTER ELEMENTS : $' 
MESSAGE2 DB 'AFTER SORTING : $'
MESSAGE3 DB 'PRESS : 1-FOR DESCENDING ORDER  2-FOR ASCENDING ORDER ; $'
MESSAGE4 DB 'INVALID NUMBER $'
ARR DB 100 dup (0)
.CODE  



;MAIN 
MAIN PROC
    MOV AX,@DATA
    MOV DS,AX
    MOV AH,9       ;DISPLAY MESSAGE
    lea DX,MESSAGE1
    INT 21H
    MOV CX,0 
    ;FILLING ARRAY
    MOV AH,1 ;FIRST INPUT
    INT 21H
    MOV SI,0
    WHILE_:
        CMP AL,0DH      ;COMPARE INPUT WITH CR
        JE END_WHILE    ;IF EQUAL JMP TO END_WHILE
        MOV ARR[SI],AL ;MOVE INPUT INTO ARRAY
        INC SI          ;SI+=1
        INC CX
        MOV AH,2
        MOV DX,' '     ;DISPLAY SPACE
        INT 21H
        MOV AH,1
        INT 21H
    JMP WHILE_          ;JMP WHILE_ TO CONTINUE ENTER THE INPUTS
    END_WHILE:
        MOV AH,2
        MOV DL,0DH  ;CARRIAGE RETURN IN ASCII TABLE
        INT 21H
        MOV DL,0AH  ;LINE FEED IN ASCII TABLE
        INT 21H
    JCXZ EXIT ;IF CX == 0 JMP EXIT (NO INPUTS ENTERED) 
    
    LEA SI,ARR ;OFFSET OF ARRAY INTO SI
    MOV BX,CX
    
    
    ;TYPE OF SORTING
    MOV AH,9
    LEA DX,MESSAGE3
    INT 21H
    MOV AH,2
    MOV DL,0DH  ;CARRIAGE RETURN IN ASCII TABLE
    INT 21H
    MOV DL,0AH  ;LINE FEED IN ASCII TABLE
    INT 21H 
    
    MOV AH,1
    INT 21H
    SUB AL,30H 
    CMP AL,1      ;COMPARE INPUT WITH 1
    JB INVALID 
    JE P1    ;IF EQUAL JMP TO P1 AND THEN CALL DESCENDING SORT
    CMP AL,2      ;COMPARE INPUT WITH 2
    JA INVALID
    JE P2    ;IF EQUAL JMP TO P1 AND THEN CALL ASCENDING SORT
    P1: CALL BUBBLE_DESCENDING_SORT
    JMP PRINT_ARRAY 
    P2: CALL BUBBLE_ASCENDING_SORT  
    JMP PRINT_ARRAY
    
    
    
    INVALID:
    MOV AH,2
    MOV DL,0DH  ;CARRIAGE RETURN IN ASCII TABLE
    INT 21H
    MOV DL,0AH  ;LINE FEED IN ASCII TABLE
    INT 21H 
    MOV AH,9
    LEA DX,MESSAGE4
    INT 21H
    JMP EXIT
      
    ;PRINT AFTER SORTING
    PRINT_ARRAY:
    MOV AH,2
    MOV DL,0DH  ;CARRIAGE RETURN IN ASCII TABLE
    INT 21H
    MOV DL,0AH  ;LINE FEED IN ASCII TABLE
    INT 21H 
        
    MOV AH,9
    LEA DX,MESSAGE2
    INT 21H
    MOV SI,0
    PRINT_SORTED_ARRAY:
        MOV AH,2
        MOV DL,ARR[SI]
        INT 21H
        MOV DL,' '
        INT 21H
        INC SI
        LOOP PRINT_SORTED_ARRAY
    EXIT:
        MOV AH,4CH
        INT 21H
        MAIN ENDP







BUBBLE_DESCENDING_SORT PROC
   ;THIS PROCEDURE WILL SORT THE ARRAY IN DESCENDING ORDER
   ;INPUT : SI=OFFSET ADDRESS OF THE ARRAY
   ;      : BX=ARRAY SIZE
   PUSH AX
   PUSH BX
   PUSH CX
   PUSH DX
   PUSH DI
   
   MOV AX,SI
   MOV CX,BX

  DEC CX
  JCXZ BUBBLESORT_END                         
  @OUTER_LOOP1:
      MOV BX,CX           ;SET BX=CX
      MOV SI,AX           ;SET SI=AX (IN EACH LOOP IN OUTER LOOP SET SI THE BEGINNIG OFFSET OF THE AARAY)
      MOV DI,AX           ;SET DI=AX
      INC DI              ;SET DI=DI+1
      @INNER_LOOP1:        ;
          MOV DL,[SI]     ;SET DL=[SI]   (EXAMPLE: DL=[SI]=ARR[0],[DI]=ARR[1]}  
          CMP DL,[DI]     ;COMPARE DL WITH [DI]
          JNG @NOT_SWAP1   ;JMP IF DL<=[DI] ([DI] IS GREATER THAN DL )
          XCHG DL,[DI]    ;IF DL > [DI] EXCHANGE THE VALUE OD DL AND [DI]
          MOV [SI],DL
          @NOT_SWAP1:
          INC SI 
          INC DI
          DEC BX
      JNZ @INNER_LOOP1 ;JMP IF BX!=0
      LOOP @OUTER_LOOP1
  
       
  BUBBLESORT_END:
  POP DI
  POP DX
  POP CX
  POP BX
  POP AX
  RET   ;RETURN TO RHE CALLING PROCEDURE
  BUBBLE_DESCENDING_SORT ENDP

   
    
    
   

BUBBLE_ASCENDING_SORT PROC
   ;THIS PROCEDURE WILL SORT THE ARRAY IN ASCENDING ORDER
   ;INPUT : SI=OFFSET ADDRESS OF THE ARRAY
   ;      : BX=ARRAY SIZE
   PUSH AX
   PUSH BX
   PUSH CX
   PUSH DX
   PUSH DI
   
   MOV AX,SI
   MOV CX,BX

  DEC CX
  JCXZ BUBBLESORT2_END                         
  @OUTER_LOOP2:
      MOV BX,CX           ;SET BX=CX
      MOV SI,AX           ;SET SI=AX (IN EACH LOOP IN OUTER LOOP SET SI THE BEGINNIG OFFSET OF THE AARAY)
      MOV DI,AX           ;SET DI=AX
      INC DI              ;SET DI=DI+1
      @INNER_LOOP2:        ;
          MOV DL,[SI]     ;SET DL=[SI]   (EXAMPLE: DL=[SI]=ARR[0],[DI]=ARR[1]}  
          CMP [DI],DL     ;COMPARE DL WITH [DI]
          JNG @NOT_SWAP2   ;JMP IF [DI]<=DL (DL IS GREATER THAN [DI] )
          XCHG DL,[DI]    ;IF DL > [DI] EXCHANGE THE VALUE OD DL AND [DI]
          MOV [SI],DL
          @NOT_SWAP2:
          INC SI 
          INC DI
          DEC BX
      JNZ @INNER_LOOP2 ;JMP IF BX!=0
      LOOP @OUTER_LOOP2

   
  BUBBLESORT2_END:
  POP DI
  POP DX
  POP CX
  POP BX
  POP AX
  RET   ;RETURN TO RHE CALLING PROCEDURE
  BUBBLE_ASCENDING_SORT ENDP
 
END MAIN